@page "/EditarTicket"
@page "/EditarTicket/{ticketId:int}"

@inject TicketServices ticketServices;
@inject NavigationManager NavigationManager;
@inject ClienteServices clienteServices;
@inject PrioridadServices prioridadServices;
@inject SistemaServices sistemaServices;

<PageTitle>Editar Ticket</PageTitle>
<EditForm Model="ticket" OnValidSubmit="Modificar" FormName="modificarTicket">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header">
				<h3><strong>Editar Ticket</strong></h3>
			</div>
			<div class="card-body">
				@*Ticket Id:*@
				<label>ID:</label>
				<div class="col-2">
					<InputNumber class="form-control" @bind-Value="ticket.TicketId"></InputNumber>
				</div>
				<div class="row">
					@*Fecha:*@
					<div class="col-2">
						<label>Fecha:</label>
						<InputDate @bind-Value="ticket.Fecha" class="form-control input-group-sm"></InputDate>
						<ValidationMessage For="@(() => ticket.Fecha)" />
					</div>
					@*SolicitadoPor:*@
					<div class="col-3">
						<label>Solicitado Por:</label>
						<InputSelect class="form-select" @bind-Value="ticket.SolicitadoPor" @oninput="(e) => ActualizarClienteId(e.Value.ToString())">
							@foreach (var cliente in listaClientes)
							{
								<option value="@cliente.Nombres">@cliente.Nombres</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.SolicitadoPor)" />
					</div>
					@*SistemaId:*@
					<div class="col-3">
						<label>Sistema:</label>
						<InputSelect class="form-select" @bind-Value="ticket.SistemaId">
							@foreach (var sistema in listaSistemas)
							{
								<option value="@sistema.SistemaId">@sistema.Nombre</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.SistemaId)" />
					</div>
					@*PrioridadId:*@
					<div class="col-3">
						<label>Prioridad:</label>
						<InputSelect class="form-select" @bind-Value="ticket.PrioridadId">
							@foreach (var prioridad in listaPrioridades)
							{
								<option value="@prioridad.PrioridadId">@prioridad.Descripcion</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => ticket.PrioridadId)" />
					</div>
				</div>
				<div class="row">
					@*Asunto:*@
					<div class="col-3">
						<label>Asunto:</label>
						<InputText @bind-Value="ticket.Asunto" class="form-control input-group-sm" placeholder="Ingrese un título para el ticket."></InputText>
						<ValidationMessage For="@(() => ticket.Asunto)" />
					</div>
					@*Descripción:*@
					<div class="col-9">
						<label>Descripci&oacute;n:</label>
						<InputText @bind-Value="ticket.Descripcion" class="form-control input-group-sm" placeholder="Explique aquí el problema."></InputText>
						<ValidationMessage For="@(() => ticket.Descripcion)" />
					</div>
				</div>
			</div>
			<div class="card-footer d-flex justify-content-center">
				<button type="submit" class="btn btn-outline-primary"><i class="bi bi-floppy-fill" /> Modificar</button>
				<div class="col d-flex justify-content-end"><a href="/DetallesTickets" class="btn btn-dark"> Volver</a></div>

			</div>
		</div>
	</div>
	@Mensaje
</EditForm>

@code {
	[Parameter]
	public int ticketId { get; set; }
	public Tickets ticket { get; set; } = new Tickets();
	public string Mensaje { get; set; } = string.Empty;
	public List<Prioridades> listaPrioridades = new List<Prioridades>();
	public List<Clientes> listaClientes = new List<Clientes>();
	public List<Sistemas> listaSistemas = new List<Sistemas>();

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		Expression<Func<Clientes, bool>> criterioCliente = cliente => cliente.ClienteId > 0;
		listaClientes = clienteServices.Listar(criterioCliente);

		Expression<Func<Sistemas, bool>> criterioSistema = sistema => sistema.SistemaId > 0;
		listaSistemas = sistemaServices.Listar(criterioSistema);

		Expression<Func<Prioridades, bool>> criterioPrioridad = prioridad => prioridad.PrioridadId > 0;
		listaPrioridades = prioridadServices.Listar(criterioPrioridad);

		ticket = await ticketServices.BuscarId(ticketId);
	}

	public async Task Modificar()
	{
		Mensaje = string.Empty;
		if (await ticketServices.Guardar(ticket))
			VolverAtras();
		else
			Mensaje = "No se pudo modificar el ticket.";
	}

	void VolverAtras()
	{
		NavigationManager.NavigateTo("/DetallesTickets");
	}

	public async Task ActualizarClienteId(string nombre)
	{
		if (nombre != null)
		{
			var buscar = await clienteServices.BuscarNombre(nombre);
			if (buscar != null)
				ticket.ClienteId = buscar.ClienteId;
		}
	}
}